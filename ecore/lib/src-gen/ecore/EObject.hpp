// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//    
// Warning: This file was generated by soft.generator.cpp Generator
// 
//*****************************************************************************
#ifndef ECORE_EOBJECT_HPP
#define ECORE_EOBJECT_HPP

#include "ecore/Exports.hpp"
#include "ecore/ENotifier.hpp"
#include "ecore/Any.hpp"

#include <memory>

//forward declarations
namespace ecore 
{
    template<typename T> class EList;
}
namespace ecore 
{
    template<typename T> class ECollectionView;
}
namespace ecore 
{
    class EResource;
}
namespace ecore 
{
    class EClass;
}
namespace ecore 
{
    class EObject;
}
namespace ecore 
{
    class EOperation;
}
namespace ecore 
{
    class EReference;
}
namespace ecore 
{
    class EStructuralFeature;
}

// Start of user code forward declarations for EObject
namespace ecore::impl
{
    class EObjectInternal;
}
// End of user code

namespace ecore 
{
    class ECORE_API EObject  : public ENotifier
    {
    public:
        virtual ~EObject() = default;

        //*********************************
        // Operations
        //*********************************
        virtual std::shared_ptr<EClass> eClass() const = 0;
        
        virtual bool eIsProxy() const = 0;
        
        virtual std::shared_ptr<ecore::EResource> eResource() const = 0;
        
        virtual std::shared_ptr<EObject> eContainer() const = 0;
        
        virtual std::shared_ptr<EStructuralFeature> eContainingFeature() const = 0;
        
        virtual std::shared_ptr<EReference> eContainmentFeature() const = 0;
        
        virtual std::shared_ptr<const EList<std::shared_ptr<EObject>>> eContents() const = 0;
        
        virtual std::shared_ptr<const ECollectionView<std::shared_ptr<EObject>>> eAllContents() const = 0;
        
        virtual std::shared_ptr<const EList<std::shared_ptr<EObject>>> eCrossReferences() const = 0;
        
        virtual Any eGet(const std::shared_ptr<EStructuralFeature>& feature) const = 0;
        
        virtual Any eGet(const std::shared_ptr<EStructuralFeature>& feature,bool resolve) const = 0;
        
        virtual void eSet(const std::shared_ptr<EStructuralFeature>& feature,const Any& newValue) = 0;
        
        virtual bool eIsSet(const std::shared_ptr<EStructuralFeature>& feature) const = 0;
        
        virtual void eUnset(const std::shared_ptr<EStructuralFeature>& feature) = 0;
        
        virtual Any eInvoke(const std::shared_ptr<EOperation>& operation,const std::shared_ptr<EList<Any>>& arguments) = 0;
        
        
        // Start of user code EObject
        virtual const impl::EObjectInternal& getInternal() const = 0;
        virtual impl::EObjectInternal& getInternal() = 0;
        // End of user code
    };
}
#endif /* ECORE_EOBJECT_HPP */
